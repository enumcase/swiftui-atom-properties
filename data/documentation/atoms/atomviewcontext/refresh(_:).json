{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@discardableResult"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"refresh"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Node"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"atom"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Node"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Node"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Hook"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Node"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","preciseIdentifier":"s:5Atoms4AtomP","text":"Atom"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Node"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Hook"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomRefreshableHook","preciseIdentifier":"s:5Atoms19AtomRefreshableHookP","text":"AtomRefreshableHook"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value which completed refreshing associated with the given atom."}]}]},{"kind":"parameters","parameters":[{"name":"atom","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An atom that associates the value."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method only accepts refreshable atoms such as types conforming to:"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It refreshes the value for the given atom and then return, so the caller can await until"},{"type":"text","text":" "},{"type":"text","text":"the value completes the update."},{"type":"text","text":" "},{"type":"text","text":"Note that it can be used only in a context that supports concurrency."}]},{"type":"codeListing","syntax":"swift","code":["let context = ...","let image = await context.refresh(AsyncImageDataAtom()).value","print(image) \/\/ Prints the data obtained through network."]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/atoms\/atomviewcontext\/refresh(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomViewContext\/refresh(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Refreshes and then return the value associated with the given refreshable atom."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"refresh"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Node"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Node"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Node"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Hook"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}],"title":"refresh(_:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:5Atoms15AtomViewContextV7refreshy4Hook_5ValueQZxYaAA0B0RzAA0b11RefreshableF0AERpzlF","modules":[{"name":"Atoms"}]},"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms","doc:\/\/Atoms\/documentation\/Atoms\/AtomViewContext"]]},"references":{"doc://Atoms/documentation/Atoms/AsyncSequenceAtom":{"role":"symbol","title":"AsyncSequenceAtom","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequenceAtom"}],"abstract":[{"type":"text","text":"An atom type that provides asynchronous, sequential elements of the given "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" "},{"type":"text","text":"as an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase"},{"type":"text","text":" value."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncSequenceAtom"}],"url":"\/documentation\/atoms\/asyncsequenceatom"},"doc://Atoms/documentation/Atoms/AtomRefreshableHook":{"role":"symbol","title":"AtomRefreshableHook","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomRefreshableHook"}],"abstract":[{"type":"text","text":"Internal use, a hook type that determines behavioral details of refreshable, asynchronous atoms."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomRefreshableHook","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AtomRefreshableHook"}],"url":"\/documentation\/atoms\/atomrefreshablehook"},"doc://Atoms/documentation/Atoms/TaskAtom":{"role":"symbol","title":"TaskAtom","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskAtom"}],"abstract":[{"type":"text","text":"An atom type that provides a nonthrowing "},{"type":"codeVoice","code":"Task"},{"type":"text","text":" from the given asynchronous function."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TaskAtom"}],"url":"\/documentation\/atoms\/taskatom"},"doc://Atoms/documentation/Atoms":{"role":"collection","title":"Atoms","abstract":[{"type":"text","text":"A declarative state management and dependency injection library for SwiftUI x Concurrency."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms","kind":"symbol","type":"topic","url":"\/documentation\/atoms"},"doc://Atoms/documentation/Atoms/ThrowingTaskAtom":{"role":"symbol","title":"ThrowingTaskAtom","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ThrowingTaskAtom"}],"abstract":[{"type":"text","text":"An atom type that provides a throwing "},{"type":"codeVoice","code":"Task"},{"type":"text","text":" from the given asynchronous, throwing function."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ThrowingTaskAtom"}],"url":"\/documentation\/atoms\/throwingtaskatom"},"doc://Atoms/documentation/Atoms/AtomViewContext":{"role":"symbol","title":"AtomViewContext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomViewContext"}],"abstract":[{"type":"text","text":"A context structure that to read, watch, and otherwise interacting with atoms."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomViewContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AtomViewContext"}],"url":"\/documentation\/atoms\/atomviewcontext"},"doc://Atoms/documentation/Atoms/Atom":{"role":"symbol","title":"Atom","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Atom"}],"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Atom"}],"url":"\/documentation\/atoms\/atom"},"doc://Atoms/documentation/Atoms/AtomViewContext/refresh(_:)":{"role":"symbol","title":"refresh(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"refresh"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Node"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Node"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Node"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Hook"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"Refreshes and then return the value associated with the given refreshable atom."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomViewContext\/refresh(_:)","kind":"symbol","type":"topic","url":"\/documentation\/atoms\/atomviewcontext\/refresh(_:)"},"doc://Atoms/documentation/Atoms/PublisherAtom":{"role":"symbol","title":"PublisherAtom","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PublisherAtom"}],"abstract":[{"type":"text","text":"An atom type that provides a sequence of values of the given "},{"type":"codeVoice","code":"Publisher"},{"type":"text","text":" as an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase"},{"type":"text","text":" value."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PublisherAtom"}],"url":"\/documentation\/atoms\/publisheratom"},"doc://Atoms/documentation/Atoms/AsyncPhase":{"role":"symbol","title":"AsyncPhase","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncPhase"}],"abstract":[{"type":"text","text":"A value that represents a success, a failure, or a state in which the result of"},{"type":"text","text":" "},{"type":"text","text":"asynchronous process has not yet been determined."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncPhase"}],"url":"\/documentation\/atoms\/asyncphase"}}}